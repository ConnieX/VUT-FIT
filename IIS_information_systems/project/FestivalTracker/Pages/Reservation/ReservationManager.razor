@page "/reservations"
@attribute [Authorize(Policy = "Cashier")]
@using FestivalTracker.Data
@using Microsoft.EntityFrameworkCore
@inject DatabaseContext Database;

<h3>Správa rezervací</h3>

<h4 class="mt-4">Nedokončené rezervace</h4>
<table class="table table-hover ">
    <thead>
    <tr>
        <th scope="col" style="width: 35%">Email</th>
        <th scope="col" style="width: 25%">Festival</th>
        <th scope="col" style="width: 25%">Typ</th>
        <th scope="col" style="width: 15%">Akce</th>

    </tr>
    </thead>
    <tbody>
    @foreach (var reservationItem in _reservations) {
        <tr>
            <td>@reservationItem.Reservation.Person.Email</td>
            <td>@reservationItem.Festival.Name</td>
            <td>@reservationItem.TicketType.Name</td>
            <td>
                @if (reservationItem.Reservation.State == "Zaplaceno") {
                    <button class="btn btn-outline-success" @onclick="@(args => GiveTicket(reservationItem))">Vydat</button>
                }
                else {
                    <button class="btn btn-outline-danger" @onclick="@(args => RemoveReservations(reservationItem))">Odebrat</button>
                }
            </td>

        </tr>
    }
    </tbody>
</table>


<h4>Dokončené rezervace</h4>
<table class="table table-hover ">
    <thead>
    <tr>
        <th scope="col" style="width: 35%">Email</th>
        <th scope="col" style="width: 25%">Festival</th>
        <th scope="col" style="width: 25%">Typ</th>
        <th scope="col" style="width: 15%">&nbsp;</th>


    </tr>
    </thead>
    <tbody>
    @foreach (var (reservation, festival, ticketType) in _okReservations) {
        <tr>
            <td>@reservation.Person.Email</td>
            <td>@festival.Name</td>
            <td>@ticketType.Name</td>
            <td>&nbsp;</td>
        </tr>
    }
    </tbody>
</table>


@code {

    List<ReservationItem> _reservations = new List<ReservationItem>();

    List<ReservationItem> _okReservations = new List<ReservationItem>();

    private sealed record ReservationItem(Reservation Reservation, Festival Festival, TicketType TicketType);


    void GiveTicket(ReservationItem item) {
        item.Reservation.State = "Vydáno";
        Database.Reservation.Update(item.Reservation);
        _reservations.Remove(item);
        _okReservations.Add(item);
        Database.SaveChanges();
        InvokeAsync(StateHasChanged);
    }

    void RemoveReservations(ReservationItem item) {
        Database.Ticket.RemoveRange(item.Reservation.Ticket);
        Database.Reservation.Remove(item.Reservation);
        Database.SaveChanges();
        _reservations.Remove(item);
        InvokeAsync(StateHasChanged);
    }


    protected override void OnInitialized() {
        var res = Database.Reservation.Include(x => x.Person).Include(x => x.Ticket).ToList().GroupBy(x => x.State);
        foreach (var item in res) {
            if (item.Key == "Vydáno") {
                foreach (var reservation in item) {
                    var festival = Database.Festival.Find(reservation.Ticket.First().FestivalId);
                    var type = Database.TicketType.First(x => x.Id == reservation.Ticket.First().TicketTypeId);
                    _okReservations.Add(new ReservationItem(reservation, festival, type));
                }
                continue;
            }
            foreach (var reservation in item) {
                var festival = Database.Festival.Find(reservation.Ticket.First().FestivalId);
                var type = Database.TicketType.First(x => x.Id == reservation.Ticket.First().TicketTypeId);
                _reservations.Add(new ReservationItem(reservation, festival, type));
            }
        }


        base.OnInitialized();
    }

}